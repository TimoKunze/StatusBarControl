//////////////////////////////////////////////////////////////////////
/// \mainpage StatusBar Documentation
///
/// \section intro_sec Introduction
///
/// %StatusBar is an ActiveX control that wraps the \c msctls_statusbar32 window class. It is optimized for
/// Visual Basic 6.0, but should also work in any other environment that supports COM controls.
///
/// \section basics_sec Basics
///
/// The control superclasses the native status bar window class of Windows: \c msctls_statusbar32. Although
/// I tried to wrap all features of this window class (status: Windows 10), some things may be missing.
/// In these cases you may try using the Win32 API and handle the control as a native status bar window.
///
/// \section reqs_sec Requirements
///
/// %StatusBar Unicode runs on the following operating systems:
/// - Windows XP (SP3 or later)
/// - Windows Server 2003 (SP2 or later)
/// - Windows Vista (SP2 or later)
/// - Windows Server 2008 (SP2 or later)
/// - Windows 7 (SP1 or later)
/// - Windows Server 2008 R2 (SP1 or later)
/// - Windows 8
/// - Windows Server 2012
/// - Windows 8.1
/// - Windows Server 2012 R2
/// - Windows 10
/// - Windows Server 2016
/// - Systems supported by Wine (Wine is a Win32 subsystem for alternative operating systems) - <strong>limited support</strong>
/// - ReactOS (a free Windows XP clone) - <strong>limited support</strong>
///
/// Some features have additional requirements which are mentioned in the affected feature's
/// documentation.\n
/// Limited support means, that I won't invest much work to support those systems. If a feature works on
/// a system marked with "limited support" - fine; if it does not and it's easy to fix, I'll fix it, but if
/// it's difficult to fix, I probably won't fix it. Also I will test the control much less on those systems.
///
/// \section support_sec Support
///
/// There's no entitlement to support. Period. However, you have good chances to get help if you post your
/// questions on <a href="https://github.com/TimoKunze/StatusBarControl">GitHub</a> or in the
/// <a href="https://www.timosoft-software.de/forum/viewforum.php?f=20">forums</a>.\n
/// Also the project is open source, so feel free to have a look at the source code. You may modify it, but
/// please consider sharing your changes with the rest of the world.
///
/// \section lic_sec License
///
/// <pre>
///      MIT License
///
///      Copyright (c) 2005-2018 Timo Kunze
///
///      Permission is hereby granted, free of charge, to any person obtaining a copy
///      of this software and associated documentation files (the "Software"), to deal
///      in the Software without restriction, including without limitation the rights
///      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
///      copies of the Software, and to permit persons to whom the Software is
///      furnished to do so, subject to the following conditions:
///
///      The above copyright notice and this permission notice shall be included in all
///      copies or substantial portions of the Software.
///
///      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
///      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
///      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
///      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
///      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
///      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
///      SOFTWARE.
/// </pre>
///
/// \section acks_sec Acknowledgements
///
/// Thanks go to:
/// - <a href="https://www.winehq.com">Wine Headquarters</a>, because Wine helped me a lot on
///   understanding how Windows is working.
/// - Microsoft, for ATL, WTL and Visual Studio - great libraries and a great IDE
/// - <a href="https://www.geoffchappell.com">Geoff Chappell</a>, for his website about undocumented Win32
///   API stuff.
/// - Igor Tandetnik, for his great help on learning ATL and WTL
/// - Dimitri van Heesch, for Doxygen
/// - <a href="http://www.zabkat.com/">Nikos Bozinis</a>, for his awesome help with the Vista drag'n'drop
///   stuff.
/// - <a href="https://www.dateicommander.de">Christian LÃ¼tgens</a>, for his great work as beta-tester
///   and for his help when I needed a 2nd opinion on some decisions.
/// - All donators
/// - For great music: Heaven Shall Burn, Arch Enemy, Machine Head, Trivium, Deadlock, Draconian, Soulfly,
///   Delain, Lacuna Coil, Ensiferum, Epica, Sirenia, Tristania, Nightwish, Battlelore, Amon Amarth, Volbeat,
///   Guns N' Roses
///
/// \section faq_sec FAQ
///
/// <strong>1. Why is the \c Font property ignored?</strong>\n
/// It isn't. My controls have a property \c UseSystemFont which defaults to \c True. This property tells
/// the control to use the system font rather than the font set by the \c Font property.\n
/// Why is this property's default \c True? Well, if I set system wide settings (like fonts) I expect all
/// applications to follow them. Unfortunately ignoring system wide settings seems to be trendy, so see
/// my decision as an educational measure.
///
/// <strong>2. Why is event xyz not fired?</strong>\n
/// Firing an event is relative time-consuming, even if the event isn't handled by the application at all.
/// Therefore I implemented a \c DisabledEvents property which can be used to deactivate certain events.\n
/// By default many events are deactivated.
///
/// <strong>3. Why is panel xyz drawn wrong?</strong>\n
/// Windows' native status bar implementation doesn't support custom drawing (where you customize drawing).
/// Instead it supports owner drawing (where you do drawing yourself). This owner drawing support is
/// somewhat difficult to use and I wasn't able to work around all problems yet.\n
/// Unfortunately the \c Alignment, \c Enabled and \c ForeColor properties of the \c IStatusBarPanel
/// interface must be done through owner drawing. So there're some drawing bugs:
/// - Setting \c Alignment to \c alCenter or \c alRight affects the panel's text only. The icon always
///   is left-aligned.
/// - Setting \c Alignment to \c alCenter or \c alRight while the panel's text includes tabulators to
///   create a multi-column panel, leads to misaligned text.
/// - Setting \c Enabled to \c False while the panel's text includes tabulators to create a multi-column
///   panel, leads to misaligned text.
/// - Setting \c ForeColor to a value different from -1 while the panel's text includes tabulators to
///   create a multi-column panel, leads to misaligned text.
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
/// \namespace StatBarLibU
/// \brief <em>Contains COM definitions for the control's public interface</em>
///
/// This is the Unicode version of the StatusBar COM library.
//////////////////////////////////////////////////////////////////////


#include "olectl.h"
#include "CompilerFlags.h"
#include "DispIDs.h"

#ifndef DOXYGEN_SHOULD_SKIP_THIS
	// interface is not automation marshaling conformant, requires Windows NT 4.0 SP4 or greater
	midl_pragma warning(disable: 2039)
	// identifier length exceeds 31 characters
	midl_pragma warning(disable: 2111)
	// too many methods in the interface, requires Windows NT 4.0 SP3 or greater
	midl_pragma warning(disable: 2362)
#endif

import "oaidl.idl";
import "ocidl.idl";


[
	uuid(A10D6B26-9A8F-4a87-A2D1-1D8C9EED0967),
	version(1.5),
	helpstring("TimoSoft StatusBar 1.5 (Unicode)")
]
library StatBarLibU
{
	importlib("stdole2.tlb");


	/// \brief <em>Constants used with the \c IStatusBarPanel::Alignment property</em>
	///
	/// \sa IStatusBarPanel::Alignment
	[helpstring("Constants used with the 'StatusBarPanel.Alignment' property.")]
	typedef enum AlignmentConstants {
		/// \brief The panel's text is left-aligned
		[helpstring("The panel's text is left-aligned.")]
		alLeft,
		/// \brief The panel's text is centered
		[helpstring("The panel's text is centered.")]
		alCenter,
		/// \brief The panel's text is right-aligned
		[helpstring("The panel's text is right-aligned.")]
		alRight
	} AlignmentConstants;

	/// \brief <em>Constants used with the \c Appearance property</em>
	///
	/// \sa IStatusBar::Appearance
	[helpstring("Constants used with the 'Appearance' property.")]
	typedef enum AppearanceConstants {
		/// \brief The control is drawn with a flat border
		[helpstring("The control is drawn flat.")]
		a2D,
		/// \brief The control is drawn with a normal 3D border
		[helpstring("The control is drawn with a normal 3D border.")]
		a3D,
		/// \brief The control is drawn with a light 3D border
		[helpstring("The control is drawn with a light 3D border.")]
		a3DLight
	} AppearanceConstants;

	/// \brief <em>Constants used with the \c BorderStyle property</em>
	///
	/// \sa IStatusBar::BorderStyle
	[helpstring("Constants used with the 'BorderStyle' property.")]
	typedef enum BorderStyleConstants {
		/// \brief The control is drawn without an inner border
		[helpstring("The control is drawn without an additional border.")]
		bsNone,
		/// \brief The control is drawn with an inner border
		[helpstring("The control is drawn with an additional border.")]
		bsFixedSingle
	} BorderStyleConstants;

	/// \brief <em>Flags used with the \c DisabledEvents property</em>
	///
	/// \sa IStatusBar::DisabledEvents
	[helpstring("Flags used with the 'DisabledEvents' property. They can be combined.")]
	typedef enum DisabledEventsConstants {
		/// \brief Mouse events won't be fired
		///
		/// The following events won't be fired: \c MouseDown, \c MouseUp, \c MouseEnter, \c MouseHover,
		/// \c MouseLeave, \c MouseMove, \c PanelMouseEnter, \c PanelMouseLeave
		///
		/// \sa _IStatusBarEvents::MouseDown, _IStatusBarEvents::MouseUp, _IStatusBarEvents::MouseEnter,
		///     _IStatusBarEvents::MouseHover, _IStatusBarEvents::MouseLeave, _IStatusBarEvents::MouseMove,
		///     _IStatusBarEvents::PanelMouseEnter, _IStatusBarEvents::PanelMouseLeave
		[helpstring("Disables the following events: MouseDown, MouseUp, MouseEnter, MouseHover, MouseLeave, MouseMove, PanelMouseEnter, PanelMouseLeave")]
		deMouseEvents = 0x01,
		/// \brief Click events won't be fired
		///
		/// The following events won't be fired: \c Click, \c DblClick, \c MClick, \c MDblClick,
		/// \c RClick, \c RDblClick, \c XClick, \c XDblClick
		///
		/// \sa _IStatusBarEvents::Click, _IStatusBarEvents::DblClick,
		///     _IStatusBarEvents::MClick, _IStatusBarEvents::MDblClick,
		///     _IStatusBarEvents::RClick, _IStatusBarEvents::RDblClick,
		///     _IStatusBarEvents::XClick, _IStatusBarEvents::XDblClick
		[helpstring("Disables the following events: Click, DblClick, MClick, MDblClick, RClick, RDblClick, XClick, XDblClick")]
		deClickEvents = 0x02,
		/// \brief The \c SetupToolTipWindow event won't be fired
		///
		/// The following event won't be fired: \c SetupToolTipWindow
		///
		/// \sa _IStatusBarEvents::SetupToolTipWindow
		[helpstring("Disables the following event: SetupToolTipWindow")]
		deSetupToolTipWindow = 0x04
	} DisabledEventsConstants;

	/// \brief <em>Constants used with the \c IOLEDataObject::GetDropDescription and IOLEDataObject::SetDropDescription methods</em>
	///
	/// \sa IOLEDataObject::GetDropDescription, IOLEDataObject::SetDropDescription
	[helpstring("Constants used with the 'OLEDataObject.GetDropDescription' and 'OLEDataObject.SetDropDescription' methods.")]
	typedef enum DropDescriptionIconConstants {
		/// \brief No drop description is displayed
		[helpstring("No drop description is displayed.")]
		ddiNone = -1/*DROPIMAGE_INVALID*/,     // should be 8 (DROPIMAGE_NOIMAGE)
		/// \brief The drop description icon that visualizes the \c odeNone drop effect is displayed
		[helpstring("The drop description icon that visualizes the 'odeNone' drop effect is displayed.")]
		ddiNoDrop = 0/*DROPIMAGE_NONE*/,
		/// \brief The drop description icon that visualizes the \c odeCopy drop effect is displayed
		[helpstring("The drop description icon that visualizes the 'odeCopy' drop effect is displayed.")]
		ddiCopy = 1/*DROPIMAGE_COPY*/,
		/// \brief The drop description icon that visualizes the \c odeMove drop effect is displayed
		[helpstring("The drop description icon that visualizes the 'odeMove' drop effect is displayed.")]
		ddiMove = 2/*DROPIMAGE_MOVE*/,
		/// \brief The drop description icon that visualizes the \c odeLink drop effect is displayed
		[helpstring("The drop description icon that visualizes the 'odeLink' drop effect is displayed.")]
		ddiLink = 4/*DROPIMAGE_LINK*/,
		/// \brief The drop description icon that visualizes a drop, which causes a metadata change, is displayed
		[helpstring("The drop description icon that visualizes a drop, which causes a metadata change, is displayed.")]
		ddiMetadataChange = 6/*DROPIMAGE_LABEL*/,
		/// \brief The drop description icon that visualizes a warning is displayed
		[helpstring("The drop description icon that visualizes a warning is displayed.")]
		ddiWarning = 7/*DROPIMAGE_WARNING*/,
		/// \brief The default drop description is displayed
		///
		/// \remarks Requires Windows 7 or newer.
		[helpstring("The default drop description is displayed. Requires Windows 7 or newer.")]
		ddiUseDefault = 8/*DROPIMAGE_NOIMAGE*/     // should be -1 (DROPIMAGE_INVALID)
	} DropDescriptionIconConstants;

	/// \brief <em>Constants used with the extended mouse button events</em>
	///
	/// \sa _IStatusBarEvents::MouseDown, _IStatusBarEvents::MouseEnter, _IStatusBarEvents::MouseHover,
	///     _IStatusBarEvents::MouseLeave, _IStatusBarEvents::MouseMove, _IStatusBarEvents::MouseUp,
	///     _IStatusBarEvents::PanelMouseEnter, _IStatusBarEvents::PanelMouseLeave,
	///     _IStatusBarEvents::XClick, _IStatusBarEvents::XDblClick
	[helpstring("Constants used with the extended mouse button events.")]
	typedef enum ExtendedMouseButtonConstants {
		/// \brief Identifies the first extended mouse button
		[helpstring("Identifies the first extended mouse button.")]
		embXButton1 = 0x20,
		/// \brief Identifies the second extended mouse button
		[helpstring("Identifies the second extended mouse button.")]
		embXButton2 = 0x40
	} ExtendedMouseButtonConstants;

	/// \brief <em>Flags used with the \c HitTest method</em>
	///
	/// \sa IStatusBar::HitTest
	[helpstring("Flags used with the 'HitTest' method.")]
	typedef enum HitTestConstants {
		/// \brief Not over a panel
		///
		/// The specified point lies inside the control's client area, but is not over a panel.
		[helpstring("The specified point lies inside the control's client area, but is not over a panel.")]
		htNotOverPanel = 0x0001 /*SBARHT_NOWHERE*/,
		/// \brief On a panel
		///
		/// The specified point lies on a panel.
		[helpstring("The specified point lies on a panel.")]
		htPanel = 0x0002 /*SBARHT_ONITEM*/,
		/// \brief Above the control's client area
		///
		/// The specified point lies above the control's client area.
		[helpstring("The specified point lies above the control's client area.")]
		htAbove = 0x0100 /*SBARHT_ABOVE*/,
		/// \brief Below the control's client area
		///
		/// The specified point lies below the control's client area.
		[helpstring("The specified point lies below the control's client area.")]
		htBelow = 0x0200 /*SBARHT_BELOW*/,
		/// \brief To the right of the control's client area
		///
		/// The specified point lies to the right of the control's client area.
		[helpstring("The specified point lies to the right of the control's client area.")]
		htToRight = 0x0400 /*SBARHT_TORIGHT*/,
		/// \brief To the left of the control's client area
		///
		/// The specified point lies to the left of the control's client area.
		[helpstring("The specified point lies to the left of the control's client area.")]
		htToLeft = 0x0800 /*SBARHT_TOLEFT*/
	} HitTestConstants;

	/// \brief <em>Constants used with the \c MousePointer property</em>
	///
	/// \sa IStatusBar::MousePointer
	[helpstring("Constants used with the 'MousePointer' property.")]
	typedef enum MousePointerConstants {
		/// \brief The default mouse cursor is used
		[helpstring("The default mouse cursor is used.")]
		mpDefault,
		/// \brief The default arrow is used as mouse cursor
		[helpstring("The default arrow is used as mouse cursor.")]
		mpArrow,
		/// \brief A cross is used as mouse cursor
		[helpstring("A cross is used as mouse cursor.")]
		mpCross,
		/// \brief A vertical beam (like in textboxes) is used as mouse cursor
		[helpstring("A vertical beam (like in textboxes) is used as mouse cursor.")]
		mpIBeam,
		/// \brief An icon is used as mouse cursor
		[helpstring("An icon is used as mouse cursor.")]
		mpIcon,
		/// \brief A mouse cursor indicating window sizing is used
		[helpstring("A mouse cursor indicating window sizing is used.")]
		mpSize,
		/// \brief A mouse cursor indicating window sizing is used
		///
		/// This is the cursor that is used while resizing a window into the direction of its
		/// upper-right or lower-left corner.
		[helpstring("A mouse cursor indicating window sizing to the direction of a window's upper-right or lower-left corner is used.")]
		mpSizeNESW,
		/// \brief A mouse cursor indicating window sizing is used
		///
		/// This is the cursor that is used while resizing a window into the direction of its upper or
		/// lower border.
		[helpstring("A mouse cursor indicating window sizing to the direction of a window's upper or lower border is used.")]
		mpSizeNS,
		/// \brief A mouse cursor indicating window sizing is used
		///
		/// This is the cursor that is used while resizing a window into the direction of its
		/// upper-left or lower-right corner.
		[helpstring("A mouse cursor indicating window sizing to the direction of a window's upper-left or lower-right corner is used.")]
		mpSizeNWSE,
		/// \brief A mouse cursor indicating window sizing is used
		///
		/// This is the cursor that is used while resizing a window into the direction of its left or
		/// right border.
		[helpstring("A mouse cursor indicating window sizing to the direction of a window's left or right border is used.")]
		mpSizeEW,
		/// \brief An arrow pointing upwardly is used as mouse cursor
		[helpstring("An arrow pointing upwardly is used as mouse cursor.")]
		mpUpArrow,
		/// \brief An hourglass is used as mouse cursor.
		[helpstring("An hourglass is used as mouse cursor.")]
		mpHourglass,
		/// \brief An mouse cursor indicating that the control can't be a drop target is used
		[helpstring("An mouse cursor indicating that the control can't be a drop target is used.")]
		mpNoDrop,
		/// \brief The default arrow with a small hourglass is used as mouse cursor
		[helpstring("The default arrow with a small hourglass is used as mouse cursor.")]
		mpArrowHourglass,
		/// \brief The default arrow with a small question mark is used as mouse cursor
		[helpstring("The default arrow with a small question mark is used as mouse cursor.")]
		mpArrowQuestion,
		/// \brief A mouse cursor indicating window sizing to all directions is used
		[helpstring("A mouse cursor indicating window sizing to all directions is used.")]
		mpSizeAll,
		/// \brief A hand typically used for hyperlinks is used as mouse cursor
		[helpstring("A hand typically used for hyperlinks is used as mouse cursor.")]
		mpHand,
		/// \brief A mouse cursor indicating that the program waits for some media is used
		[helpstring("A mouse cursor indicating that the program waits for some media is used.")]
		mpInsertMedia,
		/// \brief A mouse cursor indicating scrolling to all directions is used
		[helpstring("A mouse cursor indicating scrolling to all directions is used.")]
		mpScrollAll,
		/// \brief A mouse cursor indicating scrolling upwardly is used
		[helpstring("A mouse cursor indicating scrolling upwardly is used.")]
		mpScrollN,
		/// \brief A mouse cursor indicating scrolling to the window's upper-right corner is used
		[helpstring("A mouse cursor indicating scrolling to the window's upper-right corner is used.")]
		mpScrollNE,
		/// \brief A mouse cursor indicating scrolling to the window's right border is used
		[helpstring("A mouse cursor indicating scrolling to the window's right border is used.")]
		mpScrollE,
		/// \brief A mouse cursor indicating scrolling to the window's lower-right corner is used
		[helpstring("A mouse cursor indicating scrolling to the window's lower-right corner is used.")]
		mpScrollSE,
		/// \brief A mouse cursor indicating scrolling downwards is used
		[helpstring("A mouse cursor indicating scrolling downwards is used.")]
		mpScrollS,
		/// \brief A mouse cursor indicating scrolling to the window's lower-left corner is used
		[helpstring("A mouse cursor indicating scrolling to the window's lower-left corner is used.")]
		mpScrollSW,
		/// \brief A mouse cursor indicating scrolling to the window's left border is used
		[helpstring("A mouse cursor indicating scrolling to the window's left border is used.")]
		mpScrollW,
		/// \brief A mouse cursor indicating scrolling to the window's upper-left corner is used
		[helpstring("A mouse cursor indicating scrolling to the window's upper-left corner is used.")]
		mpScrollNW,
		/// \brief A mouse cursor indicating scrolling upwardly or downwards is used
		[helpstring("A mouse cursor indicating scrolling upwardly or downwards is used.")]
		mpScrollNS,
		/// \brief A mouse cursor indicating scrolling to the window's left or right border is used
		[helpstring("A mouse cursor indicating scrolling to the window's left or right border is used.")]
		mpScrollEW,
		/// \brief The custom mouse cursor defined by the \c MouseIcon property is used
		[helpstring("The custom mouse cursor defined by the MouseIcon property is used.")]
		mpCustom = 0x63
	} MousePointerConstants;

	/// \brief <em>Constants used with OLE drag'n'drop</em>
	///
	/// \sa _IStatusBarEvents::OLEDragEnter, _IStatusBarEvents::OLEDragMouseMove,
	///     _IStatusBarEvents::OLEDragDrop
	[helpstring("Constants used with the OLEDrag* events.")]
	typedef enum OLEDropEffectConstants {
		/// \brief No OLE drag and drop operation has occurred or will occur
		[helpstring("No OLE drag and drop operation has occurred or will occur.")]
		odeNone = 0 /*DROPEFFECT_NONE*/,
		/// \brief A copy has occured or will occur
		[helpstring("A copy has occured or will occur.")]
		odeCopy = 1 /*DROPEFFECT_COPY*/,
		/// \brief A move has occured or will occur
		[helpstring("A move has occured or will occur.")]
		odeMove = 2 /*DROPEFFECT_MOVE*/,
		/// \brief A link has occured or will occur
		[helpstring("A link has occured or will occur.")]
		odeLink = 4 /*DROPEFFECT_LINK*/,
		/// \brief Combination of \c odeCopy and \c odeMove
		[helpstring("Combination of 'odeCopy' and 'odeMove'.")]
		odeCopyOrMove = odeCopy | odeMove,
		/// \brief The drop target window has scrolled or will scroll
		[helpstring("The drop target window has scrolled or will scroll.")]
		odeScroll = 0x80000000 /*DROPEFFECT_SCROLL*/
	} OLEDropEffectConstants;

	/// \brief <em>Constants used with the \c IStatusBarPanel::BorderStyle property</em>
	///
	/// \sa IStatusBarPanel::BorderStyle
	[helpstring("Constants used with the 'StatusBarPanel.BorderStyle' property.")]
	typedef enum PanelBorderStyleConstants {
		/// \brief The panel is drawn with a sunken border
		[helpstring("The panel is drawn with a sunken border.")]
		pbsSunken,
		/// \brief The panel is drawn without a border
		[helpstring("The panel is drawn without a border.")]
		pbsNone,
		/// \brief The panel is drawn with a raised border
		[helpstring("The panel is drawn with a raised border.")]
		pbsRaised
	} PanelBorderStyleConstants;

	/// \brief <em>Constants used with the \c IStatusBarPanel::Content property</em>
	///
	/// \sa IStatusBarPanel::Content
	[helpstring("Constants used with the 'StatusBarPanel.Content' property.")]
	typedef enum PanelContentConstants {
		/// \brief The panel displays the text specified by the \c Text property
		///
		/// \sa IStatusBarPanel::Text
		[helpstring("The panel displays the text specified by the 'Text' property.")]
		pcText,
		/// \brief The panel displays the status of the \c Caps \c Lock key
		///
		/// \sa IStatusBar::CustomCapsLockText
		[helpstring("The panel displays the status of the 'Caps Lock' key.")]
		pcCapsLock,
		/// \brief The panel displays the status of the \c Num \c Lock key
		///
		/// \sa IStatusBar::CustomNumLockText
		[helpstring("The panel displays the status of the 'Num Lock' key.")]
		pcNumLock,
		/// \brief The panel displays the status of the \c Scroll \c Lock key
		///
		/// \sa IStatusBar::CustomScrollLockText
		[helpstring("The panel displays the status of the 'Scroll Lock' key.")]
		pcScrollLock,
		/// \brief The panel displays the status of the \c Kana \c Lock key
		///
		/// \sa IStatusBar::CustomKanaLockText
		[helpstring("The panel displays the status of the 'Kana Lock' key.")]
		pcKanaLock,
		/// \brief The panel displays the status of the \c Insert key
		///
		/// \sa IStatusBar::CustomInsertKeyText
		[helpstring("The panel displays the status of the 'Insert' key.")]
		pcInsertKey,
		/// \brief The panel displays the current system time (hours and minutes)
		[helpstring("The panel displays the current system time (hours and minutes).")]
		pcShortTime,
		/// \brief The panel displays the current system time (hours, minutes and seconds)
		[helpstring("The panel displays the current system time (hours, minutes and seconds).")]
		pcLongTime,
		/// \brief The panel displays the current system date (short format)
		[helpstring("The panel displays the current system date (short format).")]
		pcShortDate,
		/// \brief The panel displays the current system date (long format)
		[helpstring("The panel displays the current system date (long format).")]
		pcLongDate,
		/// \brief The control raises the \c OwnerDrawPanel event if the panel must be drawn
		///
		/// \remarks This flag is not supported in simple mode.
		///
		/// \sa _IStatusBarEvents::OwnerDrawPanel
		[helpstring("The control raises the \c OwnerDrawPanel event if the panel must be drawn.")]
		pcOwnerDrawn = 99
	} PanelContentConstants;


	/// \brief <em>Holds the coordinates of a rectangle's opposing corners</em>
	///
	/// \sa _IStatusBarEvents::OwnerDrawPanel
	// NOTE: If we change the UUID, we also need to update _IStatusBarEvents_CP.h!
	[helpstring("Holds a rectangle's position and size."), uuid(2AF57FE3-E305-47c6-B1B9-55A13B87A775)]
	typedef struct RECTANGLE
	{
		/// \brief <em>Holds the position of the rectangle's left border in pixels</em>
		[helpstring("Holds the position of the rectangle's left border in pixels.")]
		OLE_XPOS_PIXELS Left;
		/// \brief <em>Holds the position of the rectangle's upper border in pixels</em>
		[helpstring("Holds the position of the rectangle's upper border in pixels.")]
		OLE_YPOS_PIXELS Top;
		/// \brief <em>Holds the position of the rectangle's right border in pixels</em>
		[helpstring("Holds the position of the rectangle's right border in pixels.")]
		OLE_XPOS_PIXELS Right;
		/// \brief <em>Holds the position of the rectangle's lower border in pixels</em>
		[helpstring("Holds the position of the rectangle's lower border in pixels.")]
		OLE_YPOS_PIXELS Bottom;
	} RECTANGLE;


	/// \interface IStatusBarPanel
	/// \brief <em>Wraps an existing panel</em>
	///
	/// This interface is a wrapper around a panel within the control.
	///
	/// \sa _IStatusBarPanelEvents, IStatusBarPanels, IStatusBar, _IStatusBarEvents
	[
		object,
		uuid(F33CC307-FC0D-43ea-B731-FB085F1698D8),
		dual,
		nonextensible,
		helpstring("IStatusBarPanel interface"),
		pointer_default(unique)
	]
	interface IStatusBarPanel : IDispatch
	{
		/// \brief <em>Controls the alignment of the panel's text</em>
		///
		/// Retrieves or sets the alignment of the panel's text. Any of the values defined by the
		/// \c AlignmentConstants enumeration is valid.
		///
		/// \remarks This property is not supported in simple mode.
		///
		/// \sa Text, ParseTabs, AlignmentConstants
		[propget, id(DISPID_SBP_ALIGNMENT), helpstring("Retrieves or sets the alignment of the panel's text.")]
		HRESULT Alignment([out, retval] AlignmentConstants* pValue);
		[propput, id(DISPID_SBP_ALIGNMENT), helpstring("Retrieves or sets the alignment of the panel's text.")]
		HRESULT Alignment([in] AlignmentConstants newValue);
		/// \brief <em>Controls the style of the panel's border</em>
		///
		/// Retrieves or sets the kind of border that is drawn around the panel. Any of the values defined
		/// by the \c PanelBorderStyleConstants enumeration is valid.
		///
		/// \sa IStatusBar::BorderStyle, PanelBorderStyleConstants
		[propget, id(DISPID_SBP_BORDERSTYLE), helpstring("Retrieves or sets the kind of border that is drawn around the panel.")]
		HRESULT BorderStyle([out, retval] PanelBorderStyleConstants* pValue);
		[propput, id(DISPID_SBP_BORDERSTYLE), helpstring("Retrieves or sets the kind of border that is drawn around the panel.")]
		HRESULT BorderStyle([in] PanelBorderStyleConstants newValue);
		/// \brief <em>Specifies the type of the panel's content</em>
		///
		/// Retrieves or sets the panel's content type. Any of the values defined by the
		/// \c PanelContentConstants enumeration is valid.
		///
		/// \remarks This property is not supported in simple mode.
		///
		/// \sa PanelContentConstants
		[propget, id(DISPID_SBP_CONTENT), helpstring("Retrieves or sets the panel's content type.")]
		HRESULT Content([out, retval] PanelContentConstants* pValue);
		[propput, id(DISPID_SBP_CONTENT), helpstring("Retrieves or sets the panel's content type.")]
		HRESULT Content([in] PanelContentConstants newValue);
		/// \brief <em>Retrieves the panel's current width</em>
		///
		/// Retrieves the panel's current width in pixels.
		///
		/// \sa IStatusBar::PanelToAutoSize, PreferredWidth, MinimumWidth
		[propget, id(DISPID_SBP_CURRENTWIDTH), helpstring("Retrieves the panel's current width in pixels.")]
		HRESULT CurrentWidth([out, retval] LONG* pValue);
		/// \brief <em>Specifies whether the panel's content is drawn disabled</em>
		///
		/// Retrieves or sets whether this panel's content is drawn disabled. If set to \c True, the content
		/// is drawn normal; otherwise it is drawn in disabled style.
		///
		/// \remarks This property is not supported in simple mode.
		///
		/// \sa hIcon, Text, Content, IStatusBar::Enabled
		[propget, id(DISPID_SBP_ENABLED), helpstring("Retrieves or sets whether this panel's content is drawn disabled.")]
		HRESULT Enabled([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SBP_ENABLED), helpstring("Retrieves or sets whether this panel's content is drawn disabled.")]
		HRESULT Enabled([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the panel's text color</em>
		///
		/// Retrieves or sets the panel's text color. If set to -1, the system's default color is used.
		///
		/// \remarks This property is not supported in simple mode.
		///
		/// \sa IStatusBar::BackColor
		[propget, id(DISPID_SBP_FORECOLOR), helpstring("Retrieves or sets the panel's text color.")]
		HRESULT ForeColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_SBP_FORECOLOR), helpstring("Retrieves or sets the panel's text color.")]
		HRESULT ForeColor([in] OLE_COLOR newValue);
		/// \brief <em>Specifies the handle of the icon displayed in the panel</em>
		///
		/// Retrieves or sets the panel's icon handle.
		///
		/// \remarks The previously set icon does NOT get destroyed automatically.
		///
		/// \sa Text, Content
		[propget, id(DISPID_SBP_HICON), helpstring("Retrieves or sets the panel's icon handle.")]
		HRESULT hIcon([out, retval] OLE_HANDLE* pValue);
		[propput, id(DISPID_SBP_HICON), helpstring("Retrieves or sets the panel's icon handle.")]
		HRESULT hIcon([in] OLE_HANDLE newValue);
		/// \brief <em>Retrieves the panel's zero-based index</em>
		///
		/// Retrieves a zero-based index identifying this panel.
		///
		/// \remarks Adding or removing panels changes other panels' indices.\n
		///          This is the default property of the \c IStatusBarPanel interface.\n
		///          This property is read-only.
		[propget, id(DISPID_SBP_INDEX), helpstring("Retrieves the panel's zero-based index.")]
		HRESULT Index([out, retval] LONG* pValue);
		/// \brief <em>Specifies the panel's minimum width</em>
		///
		/// Retrieves or sets the panel's minimum width in pixels. If the panel is automatically sized, its
		/// width won't decrease below the minimum width.
		///
		/// \remarks This property is not supported in simple mode.
		///
		/// \sa IStatusBar::PanelToAutoSize, CurrentWidth, PreferredWidth
		[propget, id(DISPID_SBP_MINIMUMWIDTH), helpstring("Retrieves or sets the panel's minimum width in pixels.")]
		HRESULT MinimumWidth([out, retval] LONG* pValue);
		[propput, id(DISPID_SBP_MINIMUMWIDTH), helpstring("Retrieves or sets the panel's minimum width in pixels.")]
		HRESULT MinimumWidth([in] LONG newValue);
		/// \brief <em>Specifies the panel's associated data</em>
		///
		/// Retrieves or sets the \c Long value associated with the panel. Use this property to associate
		/// any data with the panel.
		[propget, id(DISPID_SBP_PANELDATA), helpstring("Retrieves or sets the Long value associated with the panel.")]
		HRESULT PanelData([out, retval] LONG* pValue);
		[propput, id(DISPID_SBP_PANELDATA), helpstring("Retrieves or sets the Long value associated with the panel.")]
		HRESULT PanelData([in] LONG newValue);
		/// \brief <em>Controls processing of tabulators in the panel's text</em>
		///
		/// Retrieves or sets whether the tabulators in this panel's text are parsed to create a multi-column
		/// panel. If set to \c True, the tabulators are parsed; otherwise not.
		///
		/// \remarks Requires comctl32.dll version 5.80 or higher.
		///
		/// \sa Text, Alignment
		[propget, id(DISPID_SBP_PARSETABS), helpstring("Retrieves or sets whether the tabulators in this panel's text are parsed to create a multi-column panel. Requires comctl32.dll version 5.80 or higher.")]
		HRESULT ParseTabs([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SBP_PARSETABS), helpstring("Retrieves or sets whether the tabulators in this panel's text are parsed to create a multi-column panel. Requires comctl32.dll version 5.80 or higher.")]
		HRESULT ParseTabs([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the panel's preferred width</em>
		///
		/// Retrieves or sets the panel's preferred width in pixels.
		///
		/// \remarks This property is not supported in simple mode.
		///
		/// \sa IStatusBar::PanelToAutoSize, CurrentWidth, MinimumWidth
		[propget, id(DISPID_SBP_PREFERREDWIDTH), helpstring("Retrieves or sets the panel's preferred width in pixels.")]
		HRESULT PreferredWidth([out, retval] LONG* pValue);
		[propput, id(DISPID_SBP_PREFERREDWIDTH), helpstring("Retrieves or sets the panel's preferred width in pixels.")]
		HRESULT PreferredWidth([in] LONG newValue);
		/// \brief <em>Controls the control's right-to-left features</em>
		///
		/// Retrieves or sets the panel's reading direction. If set to \c True, the panel's text reads from
		/// right to left; otherwise from left to right.
		///
		/// \sa IStatusBar::RightToLeftLayout
		[propget, id(DISPID_SBP_RIGHTTOLEFTTEXT), helpstring("Retrieves or sets the panel's reading direction.")]
		HRESULT RightToLeftText([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_SBP_RIGHTTOLEFTTEXT), helpstring("Retrieves or sets the panel's reading direction.")]
		HRESULT RightToLeftText([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the panel's text</em>
		///
		/// Retrieves or sets the panel's text. Up to comctl32.dll version 6.0 the maximum number of characters
		/// in this text is 127. Beginning with comctl32.dll version 6.10 the text length isn't limited
		/// anymore.
		///
		/// \remarks This is the default property of the \c IStatusBarPanel interface.
		///
		/// \sa hIcon, Content, ParseTabs
		[propget, id(DISPID_SBP_TEXT), helpstring("Retrieves or sets the panel's text.")]
		HRESULT Text([out, retval] BSTR* pValue);
		[propput, id(DISPID_SBP_TEXT), helpstring("Retrieves or sets the panel's text.")]
		HRESULT Text([in] BSTR newValue);
		/// \brief <em>Specifies the panel's tooltip text</em>
		///
		/// Retrieves or sets the panel's tooltip text.
		///
		/// \sa IStatusBar::ShowToolTips, _IStatusBarEvents::SetupToolTipWindow
		[propget, id(DISPID_SBP_TOOLTIPTEXT), helpstring("Retrieves or sets the panel's tooltip text.")]
		HRESULT ToolTipText([out, retval] BSTR* pValue);
		[propput, id(DISPID_SBP_TOOLTIPTEXT), helpstring("Retrieves or sets the panel's tooltip text.")]
		HRESULT ToolTipText([in] BSTR newValue);

		/// \brief <em>Retrieves the panel's bounding rectangle</em>
		///
		/// Retrieves the panel's bounding rectangle (in pixels) within the control's client area.
		///
		/// \param[out] xLeft The x-coordinate (in pixels) of the bounding rectangle's left border
		///             relative to the control's upper-left corner.
		/// \param[out] yTop The y-coordinate (in pixels) of the bounding rectangle's top border
		///             relative to the control's upper-left corner.
		/// \param[out] xRight The x-coordinate (in pixels) of the bounding rectangle's right border
		///             relative to the control's upper-left corner.
		/// \param[out] yBottom The y-coordinate (in pixels) of the bounding rectangle's bottom border
		///             relative to the control's upper-left corner.
		///
		/// \remarks This method is not supported in simple mode.
		///
		/// \sa PreferredWidth
		[id(DISPID_SBP_GETRECTANGLE), helpstring("Retrieves the panel's bounding rectangle (in pixels) within the control's client area.")]
		HRESULT GetRectangle([in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xLeft, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yTop, [in, out, defaultvalue(0)] OLE_XPOS_PIXELS* xRight, [in, out, defaultvalue(0)] OLE_YPOS_PIXELS* yBottom);
	}


	/// \interface IStatusBarPanels
	/// \brief <em>Manages a collection of \c StatusBarPanel objects</em>
	///
	/// This interface provides easy access (including filtering) to collections of \c StatusBarPanel
	/// objects. A \c StatusBarPanels object is used to group panels that have certain properties in
	/// common.
	///
	/// \sa _IStatusBarPanelsEvents, IStatusBarPanel, IStatusBar
	[
		object,
		uuid(FCCA1FAB-3482-4e5e-BD0A-814AB6BBC945),
		dual,
		nonextensible,
		helpstring("IStatusBarPanels interface"),
		pointer_default(unique)
	]
	interface IStatusBarPanels : IDispatch
	{
		/// \brief <em>Retrieves a \c StatusBarPanel object from the collection</em>
		///
		/// Retrieves a \c StatusBarPanel object from the collection that wraps the panel identified
		/// by \c panelIndex.
		///
		/// \param[in] panelIndex A value that identifies the status bar panel to be retrieved.
		///
		/// \remarks This is the default property of the \c IStatusBarPanels interface.\n
		///          This property is read-only.
		///
		/// \sa IStatusBarPanel, Add, Remove
		[propget, id(DISPID_SBPS_ITEM), helpstring("Retrieves a 'StatusBarPanel' object from the collection that wraps the panel identified by 'panelIndex'."), nonbrowsable]
		HRESULT Item([in] LONG panelIndex, [out, retval] IStatusBarPanel** ppPanel);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves a \c VARIANT enumerator</em>
		///
		///   Retrieves a \c VARIANT enumerator that may be used to iterate the \c StatusBarPanel objects
		///   managed by this collection object. This iterator is used by Visual Basic's \c For...Each
		///   construct.
		///
		///   \remarks This property is read-only and hidden.
		///
		///   \sa <a href="https://msdn.microsoft.com/en-us/library/ms221053.aspx">IEnumVARIANT</a>
		/// \endif
		[propget, id(DISPID_SBPS__NEWENUM), restricted]
		HRESULT _NewEnum([out, retval] IUnknown** ppEnumerator);

		/// \brief <em>Adds a panel to the status bar</em>
		///
		/// Adds a panel with the specified properties at the specified position in the control and
		/// returns a \c StatusBarPanel object wrapping the inserted panel.
		///
		/// \param[in] panelText The new panel's text. Up to comctl32.dll version 6.0 the maximum number of
		///            characters in this text is 127. Beginning with comctl32.dll version 6.10 the text length
		///            isn't limited anymore.
		/// \param[in] preferredWidth The new panel's preferred width in pixels.
		/// \param[in] content The new panel's content type. Any of the values defined by the
		///            \c PanelContentConstants enumeration is valid.
		/// \param[in] alignment The alignment of the new panel's text. Any of the values defined by the
		///            \c AlignmentConstants enumeration is valid.
		/// \param[in] borderStyle The kind of border that is drawn around the new panel. Any of the values
		///            defined by the \c PanelBorderStyleConstants enumeration is valid.
		/// \param[in] panelData A \c Long value that will be associated with the panel.
		/// \param[in] insertAt The new panel's zero-based index. If set to -1, the panel will be inserted
		///            as the last panel.
		///
		/// \return The inserted panel.
		///
		/// \sa Count, Remove, RemoveAll, IStatusBarPanel::Text, IStatusBarPanel::PreferredWidth,
		///     IStatusBarPanel::Content, IStatusBarPanel::Alignment, IStatusBarPanel::BorderStyle,
		///     IStatusBarPanel::PanelData, IStatusBarPanel::Index, IStatusBar::PanelToAutoSize,
		///     PanelContentConstants, AlignmentConstants, PanelBorderStyleConstants
		[id(DISPID_SBPS_ADD), helpstring("Adds a new panel with the specified properties.")]
		HRESULT Add([in] BSTR panelText, [in] LONG PreferredWidth, [in, defaultvalue(pcText)] PanelContentConstants Content, [in, defaultvalue(alLeft)] AlignmentConstants Alignment, [in, defaultvalue(pbsSunken)] PanelBorderStyleConstants BorderStyle, [in, defaultvalue(0)] LONG PanelData, [in, defaultvalue(-1)] LONG insertAt, [out, retval] IStatusBarPanel** ppAddedPanel);
		/// \brief <em>Counts the panels in the collection</em>
		///
		/// Retrieves the number of \c StatusBarPanel objects in the collection.
		///
		/// \return The number of elements in the collection.
		///
		/// \sa Add, Remove, RemoveAll
		[id(DISPID_SBPS_COUNT), helpstring("Retrieves the number of 'StatusBarPanel' objects in the collection.")]
		HRESULT Count([out, retval] LONG* pValue);
		/// \brief <em>Removes the specified panel in the collection from the status bar</em>
		///
		/// \param[in] panelIndex A value that identifies the status bar panel to be removed.
		///
		/// \remarks The control always contains at least one panel.
		///
		/// \sa Add, Count, RemoveAll
		[id(DISPID_SBPS_REMOVE), helpstring("Removes the specified panel in the collection from the control.")]
		HRESULT Remove([in] LONG panelIndex);
		/// \brief <em>Removes all panels in the collection from the status bar</em>
		///
		/// \remarks The control always contains at least one panel.
		///
		/// \sa Add, Count, Remove
		[id(DISPID_SBPS_REMOVEALL), helpstring("Removes all panels in the collection from the control.")]
		HRESULT RemoveAll(void);
	}


	/// \interface IOLEDataObject
	/// \brief <em>Wraps the \c IDataObject interface</em>
	///
	/// This interface provides easy access to data being transferred using the \c IDataObject interface.
	///
	/// \sa _IOLEDataObjectEvents,
	///     <a href="https://msdn.microsoft.com/en-us/library/ms688421.aspx">IDataObject</a>
	[
		object,
		uuid(5E47DFCA-1A0C-47f9-98F6-35A6DDCCA654),
		dual,
		nonextensible,
		helpstring("IOLEDataObject interface"),
		pointer_default(unique)
	]
	interface IOLEDataObject : IDispatch
	{
		/// \brief <em>Deletes the contents of the \c OLEDataObject object</em>
		///
		/// \remarks This method will succeed only if the \c OLEDataObject wraps the control's own
		///          implementation of the \c IDataObject interface.
		///
		/// \sa SetData,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms688421.aspx">IDataObject</a>
		[id(DISPID_ODO_CLEAR), helpstring("Deletes the contents of the 'OLEDataObject' object.")]
		HRESULT Clear(void);
		/// \brief <em>Retrieves the best format settings from the \c OLEDataObject object</em>
		///
		/// Call this method to retrieve data format settings that match best with the data format, that you
		/// actually want to work with. Set the parameters to the data format settings you want to work with.
		/// The method will set them to the settings you should use.
		///
		/// \param[in,out] formatID An integer value specifying the data format. Valid values are those defined
		///                by VB's \c ClipBoardConstants enumeration, but also any other format that was
		///                registered using the \c RegisterClipboardFormat API function.
		/// \param[in,out] index An integer value that is assigned to the internal \c FORMATETC struct's
		///                \c lindex member. Usually you pass -1 here, but some formats like
		///                \c CFSTR_FILECONTENTS require multiple \c FORMATETC structs for the same format. In
		///                such cases you'll give each struct of this format a separate index.
		/// \param[in,out] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC
		///                struct's \c dwAspect member. Any of the \c DVASPECT_* values defined by the
		///                Microsoft&reg; Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
		///
		/// \sa GetData, GetFormat,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
		[id(DISPID_ODO_GETCANONICALFORMAT), helpstring("Call this method to retrieve data format settings that match best with the data format, that you actually want to work with.")]
		HRESULT GetCanonicalFormat([in, out] LONG* formatID, [in, out] LONG* Index, [in, out] LONG* dataOrViewAspect);
		/// \brief <em>Retrieves data from the \c OLEDataObject object</em>
		///
		/// Retrieves data from the \c OLEDataObject object, that has the specified format.
		///
		/// \param[in] formatID An integer value specifying the format of the data to retrieve. Valid values
		///            are those defined by VB's \c ClipBoardConstants enumeration, but also any other format
		///            that has been registered using the \c RegisterClipboardFormat API function.
		/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's \c lindex
		///            member. Usually you pass -1 here, but some formats like \c CFSTR_FILECONTENTS require
		///            multiple \c FORMATETC structs for the same format. In such cases you'll give each struct
		///            of this format a separate index.
		/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC struct's
		///            \c dwAspect member. Any of the \c DVASPECT_* values defined by the Microsoft&reg;
		///            Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
		///
		/// \return The data that has the specified format.
		///
		/// \remarks This method will fail, if the \c OLEDataObject object does not contain data of the
		///          specified format.
		///
		/// \sa GetCanonicalFormat, GetFormat, SetData,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
		[id(DISPID_ODO_GETDATA), helpstring("Retrieves data from the 'OLEDataObject' object.")]
		HRESULT GetData([in] LONG formatID, [in, defaultvalue(-1)] LONG Index, [in, defaultvalue(1)] LONG dataOrViewAspect, [out, retval] VARIANT* pData);
		/// \brief <em>Retrieves the \c DROPDESCRIPTION data stored by the \c OLEDataObject object</em>
		///
		/// Retrieves the \c DROPDESCRIPTION data stored by the \c OLEDataObject object. The drop description
		/// describes what will happen if the user drops the dragged data at the current position. It is
		/// displayed at the bottom of the drag image.
		///
		/// \param[in,out] targetDescription Receives the description of the current drop target.
		/// \param[in,out] actionDescription Receives the description of the whole drop action, i. e. a string
		///                like <em>"Copy to %1"</em> where <em>"Copy to"</em> is the description of the current
		///                drop effect and <em>"%1"</em> is the placeholder for the drop target description
		///                specified by \c targetDescription.
		/// \param[in,out] icon Receives the icon used to visualize the current drop effect. Any of the values
		///                defined by the \c DropDescriptionIconConstants enumeration is valid.
		///
		/// \remarks In the \c actionDescription string, the sign "%" is escaped as "%%".\n
		///          Requires Windows Vista or newer.
		///
		/// \sa SetDropDescription, IStatusBar::SupportOLEDragImages, DropDescriptionIconConstants,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb773268.aspx">DROPDESCRIPTION</a>
		[id(DISPID_ODO_GETDROPDESCRIPTION), helpstring("Retrieves the 'DROPDESCRIPTION' data stored by the 'OLEDataObject' object. Requires Windows Vista or newer.")]
		HRESULT GetDropDescription([in, out, optional] VARIANT* targetDescription, [in, out, optional] VARIANT* actionDescription, [in, out, defaultvalue(0)] DropDescriptionIconConstants* Icon);
		/// \brief <em>Retrieves whether the \c OLEDataObject object contains data in a specific format</em>
		///
		/// \param[in] formatID An integer value specifying the format to check for. Valid values are those
		///            defined by VB's \c ClipBoardConstants enumeration, but also any other format that was
		///            registered using the \c RegisterClipboardFormat API function.
		/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's \c lindex
		///            member. Usually you pass -1 here, but some formats like \c CFSTR_FILECONTENTS require
		///            multiple \c FORMATETC structs for the same format. In such cases you'll give each struct
		///            of this format a separate index.
		/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC struct's
		///            \c dwAspect member. Any of the \c DVASPECT_* values defined by the Microsoft&reg;
		///            Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
		///
		/// \return \c True, if the \c OLEDataObject object contains data in the specified format;
		///         otherwise \c False.
		///
		/// \sa GetCanonicalFormat, GetData, SetData,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
		[id(DISPID_ODO_GETFORMAT), helpstring("Retrieves whether the 'OLEDataObject' object contains data in a specific format.")]
		HRESULT GetFormat([in] LONG formatID, [in, defaultvalue(-1)] LONG Index, [in, defaultvalue(1)] LONG dataOrViewAspect, [out, retval] VARIANT_BOOL* pFormatAvailable);
		/// \brief <em>Inserts data into the \c OLEDataObject object using the specified format</em>
		///
		/// \param[in] formatID An integer value specifying the format of the data being passed. Valid values
		///            are those defined by VB's \c ClipBoardConstants enumeration, but also any other format
		///            that has been registered using the \c RegisterClipboardFormat API function.
		/// \param[in] data The data to insert. If not specified, the \c OLESetData event will be raised if
		///            data of the specified format is requested from the \c OLEDataObject object.
		/// \param[in] index An integer value that is assigned to the internal \c FORMATETC struct's \c lindex
		///            member. Usually you pass -1 here, but some formats like \c CFSTR_FILECONTENTS require
		///            multiple \c FORMATETC structs for the same format. In such cases you'll give each struct
		///            of this format a separate index.
		/// \param[in] dataOrViewAspect An integer value that is assigned to the internal \c FORMATETC struct's
		///            \c dwAspect member. Any of the \c DVASPECT_* values defined by the Microsoft&reg;
		///            Windows&reg; SDK are valid. The default is \c DVASPECT_CONTENT.
		///
		/// \remarks The \c data parameter is optional only if the \c OLEDataObject wraps the control's own
		///          implementation of the \c IDataObject interface.
		///
		/// \sa GetData, Clear,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms649049.aspx">RegisterClipboardFormat</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms688421.aspx">IDataObject</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms682177.aspx">FORMATETC</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb776902.aspx#CFSTR_FILECONTENTS">CFSTR_FILECONTENTS</a>,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms690318.aspx">DVASPECT</a>
		[id(DISPID_ODO_SETDATA), helpstring("Inserts data into the 'OLEDataObject' object using the specified format.")]
		HRESULT SetData([in] LONG formatID, [in, optional] VARIANT data, [in, defaultvalue(-1)] LONG Index, [in, defaultvalue(1)] LONG dataOrViewAspect);
		/// \brief <em>Sets the drop description displayed below the drag image</em>
		///
		/// Sets the \c DROPDESCRIPTION data. The drop description describes what will happen if the user drops
		/// the dragged data at the current position. It is displayed at the bottom of the drag image.
		///
		/// \param[in] targetDescription The description of the current drop target.
		/// \param[in] actionDescription The description of the whole drop action, i. e. a string like <em>"Copy
		///            to %1"</em> where <em>"Copy to"</em> is the description of the current drop effect and
		///            <em>"%1"</em> is the placeholder for the drop target description specified by
		///            \c targetDescription.
		/// \param[in] icon The icon used to visualize the current drop effect. Any of the values defined by
		///            the \c DropDescriptionIconConstants enumeration is valid.
		///
		/// \remarks In the \c actionDescription string, the sign "%" is escaped as "%%".\n
		///          Requires Windows Vista or newer.
		///
		/// \sa GetDropDescription, IStatusBar::SupportOLEDragImages, DropDescriptionIconConstants,
		///     <a href="https://msdn.microsoft.com/en-us/library/bb773268.aspx">DROPDESCRIPTION</a>
		[id(DISPID_ODO_SETDROPDESCRIPTION), helpstring("Sets the drop description displayed below the drag image. Requires Windows Vista or newer.")]
		HRESULT SetDropDescription([in, optional] VARIANT targetDescription, [in, optional] VARIANT actionDescription, [in, defaultvalue(ddiNone)] DropDescriptionIconConstants Icon);
	}


	/// \interface IStatusBar
	/// \brief <em>The main interface</em>
	///
	/// This is the control's main interface. It wraps the control window.
	///
	/// \sa _IStatusBarEvents
	[
		object,
		uuid(764E93EE-1EFC-471c-B4BC-954048BEB817),
		dual,
		nonextensible,
		helpstring("IStatusBar interface"),
		pointer_default(unique)
	]
	interface IStatusBar : IDispatch
	{
		/// \brief <em>Controls the style of the control's outer border</em>
		///
		/// Retrieves or sets the kind of border that is drawn around the control. Any of the values defined
		/// by the \c AppearanceConstants enumeration is valid.
		///
		/// \sa BorderStyle, AppearanceConstants
		[propget, id(DISPID_STATBAR_APPEARANCE), helpstring("Retrieves or sets the kind of border that is drawn around the control.")]
		HRESULT Appearance([out, retval] AppearanceConstants* pValue);
		[propput, id(DISPID_STATBAR_APPEARANCE), helpstring("Retrieves or sets the kind of border that is drawn around the control.")]
		HRESULT Appearance([in] AppearanceConstants newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's application ID</em>
		///
		///   Retrieves the control's application ID. This property is part of the fingerprint that
		///   uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppName, AppShortName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_STATBAR_APPID), hidden]
		HRESULT AppID([out, retval] SHORT* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's application name</em>
		///
		///   Retrieves the control's application name. This property is part of the fingerprint that
		///   uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppShortName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_STATBAR_APPNAME), hidden]
		HRESULT AppName([out, retval] BSTR* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's short application name</em>
		///
		///   Retrieves the control's short application name. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, Build, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_STATBAR_APPSHORTNAME), hidden]
		HRESULT AppShortName([out, retval] BSTR* pValue);
		/// \brief <em>Specifies the control's background color</em>
		///
		/// Retrieves or sets the control's background color. If set to -1, the system's default color is used.
		///
		/// \sa IStatusBarPanel::ForeColor
		[propget, id(DISPID_STATBAR_BACKCOLOR), helpstring("Retrieves or sets the control's background color.")]
		HRESULT BackColor([out, retval] OLE_COLOR* pValue);
		[propput, id(DISPID_STATBAR_BACKCOLOR), helpstring("Retrieves or sets the control's background color.")]
		HRESULT BackColor([in] OLE_COLOR newValue);
		/// \brief <em>Controls the style of the control's inner border</em>
		///
		/// Retrieves or sets the kind of inner border that is drawn around the control. Any of the values
		/// defined by the \c BorderStyleConstants enumeration is valid.
		///
		/// \sa Appearance, BorderStyleConstants
		[propget, id(DISPID_STATBAR_BORDERSTYLE), helpstring("Retrieves or sets the kind of inner border that is drawn around the control.")]
		HRESULT BorderStyle([out, retval] BorderStyleConstants* pValue);
		[propput, id(DISPID_STATBAR_BORDERSTYLE), helpstring("Retrieves or sets the kind of inner border that is drawn around the control.")]
		HRESULT BorderStyle([in] BorderStyleConstants newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's build number</em>
		///
		///   Retrieves the control's build number. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa Version, AppID, AppName, AppShortName, CharSet, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_STATBAR_BUILD), hidden]
		HRESULT Build([out, retval] LONG* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's character set</em>
		///
		///   Retrieves the control's character set (Unicode or ANSI). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, IsRelease, Programmer, Tester
		/// \endif
		[propget, id(DISPID_STATBAR_CHARSET), hidden]
		HRESULT CharSet([out, retval] BSTR* pValue);
		/// \brief <em>Specifies the custom text displayed by panels that display the status of the \c CAPS \c LOCK key</em>
		///
		/// Retrieves or sets the text being used for panels whose \c Content property is set to \c pcCapsLock.
		/// If set to an empty string, the key's localized name is used.
		///
		/// \sa IStatusBarPanel::Content, IStatusBarPanel::Text, CustomInsertKeyText, CustomKanaLockText,
		///     CustomNumLockText, CustomScrollLockText
		[propget, id(DISPID_STATBAR_CUSTOMCAPSLOCKTEXT), helpstring("Retrieves or sets the text being used for panels whose 'Content' property is set to 'pcCapsLock'.")]
		HRESULT CustomCapsLockText([out, retval] BSTR* pValue);
		[propput, id(DISPID_STATBAR_CUSTOMCAPSLOCKTEXT), helpstring("Retrieves or sets the text being used for panels whose 'Content' property is set to 'pcCapsLock'.")]
		HRESULT CustomCapsLockText([in] BSTR newValue);
		/// \brief <em>Specifies the custom text displayed by panels that display the status of the \c INS key</em>
		///
		/// Retrieves or sets the text being used for panels whose \c Content property is set to
		/// \c pcInsertKey.
		/// If set to an empty string, the key's localized name is used.
		///
		/// \sa IStatusBarPanel::Content, IStatusBarPanel::Text, CustomCapsLockText, CustomKanaLockText,
		///     CustomNumLockText, CustomScrollLockText
		[propget, id(DISPID_STATBAR_CUSTOMINSERTKEYTEXT), helpstring("Retrieves or sets the text being used for panels whose 'Content' property is set to 'pcInsertKey'.")]
		HRESULT CustomInsertKeyText([out, retval] BSTR* pValue);
		[propput, id(DISPID_STATBAR_CUSTOMINSERTKEYTEXT), helpstring("Retrieves or sets the text being used for panels whose 'Content' property is set to 'pcInsertKey'.")]
		HRESULT CustomInsertKeyText([in] BSTR newValue);
		/// \brief <em>Specifies the custom text displayed by panels that display the status of the \c KANA \c LOCK key</em>
		///
		/// Retrieves or sets the text being used for panels whose \c Content property is set to \c pcKanaLock.
		/// If set to an empty string, the key's localized name is used.
		///
		/// \sa IStatusBarPanel::Content, IStatusBarPanel::Text, CustomCapsLockText, CustomInsertKeyText,
		///     CustomNumLockText, CustomScrollLockText
		[propget, id(DISPID_STATBAR_CUSTOMKANALOCKTEXT), helpstring("Retrieves or sets the text being used for panels whose 'Content' property is set to 'pcKanaLock'.")]
		HRESULT CustomKanaLockText([out, retval] BSTR* pValue);
		[propput, id(DISPID_STATBAR_CUSTOMKANALOCKTEXT), helpstring("Retrieves or sets the text being used for panels whose 'Content' property is set to 'pcKanaLock'.")]
		HRESULT CustomKanaLockText([in] BSTR newValue);
		/// \brief <em>Specifies the custom text displayed by panels that display the status of the \c NUM \c LOCK key</em>
		///
		/// Retrieves or sets the text being used for panels whose \c Content property is set to \c pcNumLock.
		/// If set to an empty string, the key's localized name is used.
		///
		/// \sa IStatusBarPanel::Content, IStatusBarPanel::Text, CustomCapsLockText, CustomInsertKeyText,
		///     CustomKanaLockText, CustomScrollLockText
		[propget, id(DISPID_STATBAR_CUSTOMNUMLOCKTEXT), helpstring("Retrieves or sets the text being used for panels whose 'Content' property is set to 'pcNumLock'.")]
		HRESULT CustomNumLockText([out, retval] BSTR* pValue);
		[propput, id(DISPID_STATBAR_CUSTOMNUMLOCKTEXT), helpstring("Retrieves or sets the text being used for panels whose 'Content' property is set to 'pcNumLock'.")]
		HRESULT CustomNumLockText([in] BSTR newValue);
		/// \brief <em>Specifies the custom text displayed by panels that display the status of the \c SCROLL \c LOCK key</em>
		///
		/// Retrieves or sets the text being used for panels whose \c Content property is set to
		/// \c pcScrollLock. If set to an empty string, the key's localized name is used.
		///
		/// \sa IStatusBarPanel::Content, IStatusBarPanel::Text, CustomCapsLockText, CustomInsertKeyText,
		///     CustomKanaLockText, CustomNumLockText
		[propget, id(DISPID_STATBAR_CUSTOMSCROLLLOCKTEXT), helpstring("Retrieves or sets the text being used for panels whose 'Content' property is set to 'pcScrollLock'.")]
		HRESULT CustomScrollLockText([out, retval] BSTR* pValue);
		[propput, id(DISPID_STATBAR_CUSTOMSCROLLLOCKTEXT), helpstring("Retrieves or sets the text being used for panels whose 'Content' property is set to 'pcScrollLock'.")]
		HRESULT CustomScrollLockText([in] BSTR newValue);
		/// \brief <em>Controls which events are fired</em>
		///
		/// Retrieves or sets the events that won't be fired. Disabling events increases performance.
		/// Any combination of the values defined by the \c DisabledEventsConstants enumeration is valid.
		///
		/// \sa DisabledEventsConstants
		[propget, id(DISPID_STATBAR_DISABLEDEVENTS), helpstring("Retrieves or sets the events that won't be fired. Disabling events increases performance."), nonbrowsable]
		HRESULT DisabledEvents([out, retval] DisabledEventsConstants* pValue);
		[propput, id(DISPID_STATBAR_DISABLEDEVENTS), helpstring("Retrieves or sets the events that won't be fired. Disabling events increases performance."), nonbrowsable]
		HRESULT DisabledEvents([in] DisabledEventsConstants newValue);
		/// \brief <em>Controls redrawing of the control</em>
		///
		/// Enables or disables automatic redrawing of the control. Disabling redraw while doing large
		/// changes on the control (like adding many panels) may increase performance.
		/// If set to \c False, the control will redraw itself automatically; otherwise not.
		[propget, id(DISPID_STATBAR_DONTREDRAW), helpstring("Enables or disables automatic redrawing of the control.")]
		HRESULT DontRedraw([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_STATBAR_DONTREDRAW), helpstring("Enables or disables automatic redrawing of the control.")]
		HRESULT DontRedraw([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls whether the control accepts user input</em>
		///
		/// Enables or disables the control for user input. If set to \c True, it reacts to user input;
		/// otherwise not.
		[propget, id(DISPID_STATBAR_ENABLED), helpstring("Enables or disables the control for user input.")]
		HRESULT Enabled([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_STATBAR_ENABLED), helpstring("Enables or disables the control for user input.")]
		HRESULT Enabled([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies the control's font</em>
		///
		/// Retrieves or sets the control's font. It's used to draw the panels' text.
		///
		/// \sa UseSystemFont, IStatusBarPanel::Text
		[propget, id(DISPID_STATBAR_FONT), helpstring("Retrieves or sets the control's font.")]
		HRESULT Font([out, retval] IFontDisp** ppFont);
		[propput, id(DISPID_STATBAR_FONT), helpstring("Retrieves or sets the control's font.")]
		HRESULT Font([in] IFontDisp* pNewFont);
		[propputref, id(DISPID_STATBAR_FONT), helpstring("Retrieves or sets the control's font.")]
		HRESULT Font([in] IFontDisp* pNewFont);
		/// \brief <em>Controls visibility of the size gripper</em>
		///
		/// Retrieves or sets whether the control displays the size gripper in situations where the parent
		/// window's and the control's window styles would lead to the size gripper not being displayed.
		///
		/// \attention Changing this property destroys and recreates the control.
		[propget, id(DISPID_STATBAR_FORCESIZEGRIPPERDISPLAY), helpstring("Retrieves or sets whether the control displays the size gripper in situations where the parent window's and the control's window styles would lead to the size gripper not being displayed.")]
		HRESULT ForceSizeGripperDisplay([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_STATBAR_FORCESIZEGRIPPERDISPLAY), helpstring("Retrieves or sets whether the control displays the size gripper in situations where the parent window's and the control's window styles would lead to the size gripper not being displayed.")]
		HRESULT ForceSizeGripperDisplay([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls when the \c MouseHover event is fired</em>
		///
		/// Retrieves or sets the number of milliseconds the mouse cursor must be located over the
		/// control's client area before the \c MouseHover event is fired. If set to -1, the system
		/// hover time is used.
		///
		/// \sa _IStatusBarEvents::MouseHover
		[propget, id(DISPID_STATBAR_HOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the control's client area before the 'MouseHover' event is fired.")]
		HRESULT HoverTime([out, retval] LONG* pValue);
		[propput, id(DISPID_STATBAR_HOVERTIME), helpstring("Retrieves or sets the number of milliseconds the mouse cursor must be located over the control's client area before the 'MouseHover' event is fired.")]
		HRESULT HoverTime([in] LONG newValue);
		/// \brief <em>Retrieves the control's window handle</em>
		///
		/// Retrieves the control's window handle.
		///
		/// \remarks This property is read-only.
		///
		/// \sa _IStatusBarEvents::RecreatedControlWindow, _IStatusBarEvents::DestroyedControlWindow
		[propget, id(DISPID_STATBAR_HWND), helpstring("Retrieves the control's window handle."), nonbrowsable]
		HRESULT hWnd([out, retval] OLE_HANDLE* pValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the control's release type</em>
		///
		///   Retrieves the control's release type. This property is part of the fingerprint
		///   that uniquely identifies each software written by Timo "TimoSoft" Kunze. If set to
		///   \c True, the control was compiled for release; otherwise it was compiled for debugging.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, Programmer, Tester
		/// \endif
		[propget, id(DISPID_STATBAR_ISRELEASE), hidden]
		HRESULT IsRelease([out, retval] VARIANT_BOOL* pValue);
		/// \brief <em>Specifies the control's minimum height</em>
		///
		/// Retrieves or sets the minimum height (in pixels) of the control's drawing area.
		///
		/// \remarks The drawing area's actual height depends on the selected font.
		///
		/// \sa Font
		[propget, id(DISPID_STATBAR_MINIMUMHEIGHT), helpstring("Retrieves or sets the minimum height (in pixels) of the control's drawing area.")]
		HRESULT MinimumHeight([out, retval] OLE_YSIZE_PIXELS* pValue);
		[propput, id(DISPID_STATBAR_MINIMUMHEIGHT), helpstring("Retrieves or sets the minimum height (in pixels) of the control's drawing area.")]
		HRESULT MinimumHeight([in] OLE_YSIZE_PIXELS newValue);
		/// \brief <em>Controls the control's mouse cursor</em>
		///
		/// Retrieves or sets a user-defined mouse cursor. It's used if \c MousePointer is set to
		/// \c mpCustom.
		///
		/// \sa MousePointer, MousePointerConstants
		[propget, id(DISPID_STATBAR_MOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT MouseIcon([out, retval] IPictureDisp** ppMouseIcon);
		[propput, id(DISPID_STATBAR_MOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT MouseIcon([in] IPictureDisp* pNewMouseIcon);
		[propputref, id(DISPID_STATBAR_MOUSEICON), helpstring("Retrieves or sets a user-defined mouse cursor.")]
		HRESULT MouseIcon([in] IPictureDisp* pNewMouseIcon);
		/// \brief <em>Controls the control's mouse cursor</em>
		///
		/// Retrieves or sets the cursor's type that's used if the mouse cursor is placed within the
		/// control's client area. Any of the values defined by the \c MousePointerConstants enumeration
		/// is valid.
		///
		/// \sa MouseIcon, MousePointerConstants
		[propget, id(DISPID_STATBAR_MOUSEPOINTER), helpstring("Retrieves or sets the cursor's type that's used if the mouse cursor is placed within the control's client area.")]
		HRESULT MousePointer([out, retval] MousePointerConstants* pValue);
		[propput, id(DISPID_STATBAR_MOUSEPOINTER), helpstring("Retrieves or sets the cursor's type that's used if the mouse cursor is placed within the control's client area.")]
		HRESULT MousePointer([in] MousePointerConstants newValue);
		/// \brief <em>Retrieves the control's panels</em>
		///
		/// Retrieves a collection object wrapping the panels.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IStatusBarPanels
		[propget, id(DISPID_STATBAR_PANELS), helpstring("Retrieves a collection object wrapping the control's panels.")]
		HRESULT Panels([out, retval] IStatusBarPanels** ppPanels);
		/// \brief <em>Specifies the panel that is auto-sized to fill up the remaining space</em>
		///
		/// Retrieves or sets the panel whose width is changed automatically so that it fills up the
		/// remaining space. If set to \c Nothing, no panel is sized automatically.
		///
		/// \sa Panels, IStatusBarPanel::PreferredWidth
		[propget, id(DISPID_STATBAR_PANELTOAUTOSIZE), helpstring("Retrieves or sets the panel whose width is changed automatically so that it fills up the remaining space.")]
		HRESULT PanelToAutoSize([out, retval] IStatusBarPanel** ppPanel);
		[propputref, id(DISPID_STATBAR_PANELTOAUTOSIZE), helpstring("Retrieves or sets the panel whose width is changed automatically so that it fills up the remaining space.")]
		HRESULT PanelToAutoSize([in] IStatusBarPanel* pPanel);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the name(s) of the control's programmer(s)</em>
		///
		///   Retrieves the name(s) of the control's programmer(s). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, IsRelease, Tester
		/// \endif
		[propget, id(DISPID_STATBAR_PROGRAMMER), hidden]
		HRESULT Programmer([out, retval] BSTR* pValue);
		/// \brief <em>Controls the control's behavior in drag'n'drop operations</em>
		///
		/// Retrieves or sets whether the control is registered as a target for OLE drag'n'drop. If set to
		/// \c True, the control accepts OLE drag'n'drop actions; otherwise not.
		///
		/// \sa SupportOLEDragImages, _IStatusBarEvents::OLEDragEnter
		[propget, id(DISPID_STATBAR_REGISTERFOROLEDRAGDROP), helpstring("Retrieves or sets whether the control is registered as a target for OLE drag'n'drop.")]
		HRESULT RegisterForOLEDragDrop([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_STATBAR_REGISTERFOROLEDRAGDROP), helpstring("Retrieves or sets whether the control is registered as a target for OLE drag'n'drop.")]
		HRESULT RegisterForOLEDragDrop([in] VARIANT_BOOL newValue);
		/// \brief <em>Controls the control's right-to-left features</em>
		///
		/// Retrieves or sets the control's general layout. If set to \c True, the layout direction is
		/// right to left (e. g. the size gripper will be displayed at the control's left border); otherwise
		/// it is left to right.
		///
		/// \sa IStatusBarPanel::RightToLeftText
		[propget, id(DISPID_STATBAR_RIGHTTOLEFTLAYOUT), helpstring("Retrieves or sets the control's general layout.")]
		HRESULT RightToLeftLayout([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_STATBAR_RIGHTTOLEFTLAYOUT), helpstring("Retrieves or sets the control's general layout.")]
		HRESULT RightToLeftLayout([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control displays any tooltips</em>
		///
		/// Enables or disables tooltips. If set to \c True, the control displays panel-specific tooltips;
		/// otherwise not.
		///
		/// \attention Changing this property destroys and recreates the control.
		///
		/// \sa IStatusBarPanel::ToolTipText, _IStatusBarEvents::SetupToolTipWindow
		[propget, id(DISPID_STATBAR_SHOWTOOLTIPS), helpstring("Enables or disables tooltips.")]
		HRESULT ShowToolTips([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_STATBAR_SHOWTOOLTIPS), helpstring("Enables or disables tooltips.")]
		HRESULT ShowToolTips([in] VARIANT_BOOL newValue);
		/// \brief <em>Specifies whether the control consists of multiple panels</em>
		///
		/// Enables or disables simple mode. In simple mode, the status bar consists of a single panel.
		/// If set to \c True, the control is in simple mode; otherwise not.
		///
		/// \sa Panels, SimplePanel, _IStatusBarEvents::ToggledSimpleMode
		[propget, id(DISPID_STATBAR_SIMPLEMODE), helpstring("Enables or disables simple mode. In simple mode, the status bar consists of a single panel.")]
		HRESULT SimpleMode([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_STATBAR_SIMPLEMODE), helpstring("Enables or disables simple mode. In simple mode, the status bar consists of a single panel.")]
		HRESULT SimpleMode([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the \c StatusBarPanel object used to edit the simple mode settings</em>
		///
		/// Retrieves a \c StatusBarPanel object wrapping the control's default panel that is displayed in
		/// simple mode.
		///
		/// \remarks This property is read-only.
		///
		/// \sa IStatusBarPanel, SimpleMode, Panels
		[propget, id(DISPID_STATBAR_SIMPLEPANEL), helpstring("Retrieves a 'StatusBarPanel' object wrapping the control's default panel that is displayed in simple mode."), nonbrowsable]
		HRESULT SimplePanel([out, retval] IStatusBarPanel** ppPanel);
		/// \brief <em>Controls the control's behavior in drag'n'drop operations</em>
		///
		/// Retrieves or sets whether the control creates an \c IDropTargetHelper object, so that a drag image
		/// can be displayed during OLE drag'n'drop. If set to \c True, the control creates the object;
		/// otherwise not.
		///
		/// \remarks Requires shell32.dll version 5.0 or higher.
		///
		/// \sa RegisterForOLEDragDrop, FinishOLEDragDrop,
		///     <a href="https://msdn.microsoft.com/en-us/library/ms646238.aspx">IDropTargetHelper</a>
		[propget, id(DISPID_STATBAR_SUPPORTOLEDRAGIMAGES), helpstring("Retrieves or sets whether the control creates an 'IDropTargetHelper' object, so that a drag image can be displayed during OLE drag'n'drop. Requires shell32.dll version 5.0 or higher.")]
		HRESULT SupportOLEDragImages([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_STATBAR_SUPPORTOLEDRAGIMAGES), helpstring("Retrieves or sets whether the control creates an 'IDropTargetHelper' object, so that a drag image can be displayed during OLE drag'n'drop. Requires shell32.dll version 5.0 or higher.")]
		HRESULT SupportOLEDragImages([in] VARIANT_BOOL newValue);
		/// \if PRIVATEDOC
		///   \brief <em>Retrieves the name(s) of the control's tester(s)</em>
		///
		///   Retrieves the name(s) of the control's tester(s). This property is part of the
		///   fingerprint that uniquely identifies each software written by Timo "TimoSoft" Kunze.
		///
		///   \remarks This property is hidden and read-only.
		///
		///   \sa AppID, AppName, AppShortName, Build, CharSet, IsRelease, Programmer
		/// \endif
		[propget, id(DISPID_STATBAR_TESTER), hidden]
		HRESULT Tester([out, retval] BSTR* pValue);
		/// \brief <em>Specifies whether the control uses the system font</em>
		///
		/// Retrieves or sets whether the control uses the system's default status bar font or the font
		/// specified by the \c Font property. If set to \c True, the system font; otherwise the specified
		/// font is used.
		///
		/// \sa Font
		[propget, id(DISPID_STATBAR_USESYSTEMFONT), helpstring("Retrieves or sets whether the control uses the system's default status bar font or the font specified by the 'Font' property.")]
		HRESULT UseSystemFont([out, retval] VARIANT_BOOL* pValue);
		[propput, id(DISPID_STATBAR_USESYSTEMFONT), helpstring("Retrieves or sets whether the control uses the system's default status bar font or the font specified by the 'Font' property.")]
		HRESULT UseSystemFont([in] VARIANT_BOOL newValue);
		/// \brief <em>Retrieves the control's version</em>
		///
		/// \remarks This property is read-only.
		[propget, id(DISPID_STATBAR_VERSION), helpstring("Retrieves the control's version."), nonbrowsable]
		HRESULT Version([out, retval] BSTR* pValue);

		/// \brief <em>Displays the control's credits</em>
		///
		/// Displays some information about this control and its author.
		[id(DISPID_STATBAR_ABOUT), helpstring("Displays some information about this control and its author.")]
		HRESULT About(void);

		/// \brief <em>Finishes a pending drop operation</em>
		///
		/// During a drag'n'drop operation the drag image is displayed until the \c OLEDragDrop event has been
		/// handled. This order is intended by Microsoft Windows. However, if a message box is displayed from
		/// within the \c OLEDragDrop event, or the drop operation cannot be performed asynchronously and takes
		/// a long time, it may be desirable to remove the drag image earlier.\n
		/// This method will break the intended order and finish the drag'n'drop operation (including removal
		/// of the drag image) immediately.
		///
		/// \remarks This method will fail if not called from the \c OLEDragDrop event handler or if no drag
		///          images are used.
		///
		/// \sa _IStatusBarEvents::OLEDragDrop, SupportOLEDragImages
		[id(DISPID_STATBAR_FINISHOLEDRAGDROP), helpstring("Finishes a pending drop operation from within the 'OLEDragDrop' event, removing the drag image, but breaking the intended order. See documentation for details.")]
		HRESULT FinishOLEDragDrop(void);
		/// \brief <em>Retrieves the control's border sizes</em>
		///
		/// Retrieves the size (in pixels) of the control's borders.
		///
		/// \param[out] horizontalBorder The size of the control's horizontal border.
		/// \param[out] verticalBorder The size of the control's vertical border.
		/// \param[out] interPanelBorder The size of each vertical border between the control's panels.
		///
		/// \sa IStatusBarPanel::GetRectangle
		[id(DISPID_STATBAR_GETBORDERS), helpstring("Retrieves the size (in pixels) of the control's borders.")]
		HRESULT GetBorders([in, out, defaultvalue(0)] OLE_YSIZE_PIXELS* horizontalBorder, [in, out, defaultvalue(0)] OLE_XSIZE_PIXELS* verticalBorder, [in, out, defaultvalue(0)] OLE_XSIZE_PIXELS* interPanelBorder);
		/// \brief <em>Hit-tests the specified point</em>
		///
		/// Retrieves the control's parts that lie below the point ('x'; 'y').
		///
		/// \param[in] x The x-coordinate (in pixels) of the point to check. It must be relative to the
		///            control's upper-left corner.
		/// \param[in] y The y-coordinate (in pixels) of the point to check. It must be relative to the
		///            control's upper-left corner.
		/// \param[in,out] hitTestDetails Receives a value specifying the exact part of the control
		///                the specified point lies in. Any of the values defined by the
		///                \c HitTestConstants enumeration is valid.
		///
		/// \return The panel that the specified point belongs to. \c Nothing, if no panel was "hit" or if
		///         the control is in simple mode.
		///
		/// \sa HitTestConstants
		[id(DISPID_STATBAR_HITTEST), helpstring("Retrieves the control's parts that lie below the point ('x'; 'y').")]
		HRESULT HitTest([in] OLE_XPOS_PIXELS x, [in] OLE_YPOS_PIXELS y, [in, out] HitTestConstants* hitTestDetails, [out, retval] IStatusBarPanel** ppHitPanel);
		/// \brief <em>Loads the control's settings from the specified file</em>
		///
		/// \param[in] file The file to read from.
		///
		/// \return \c True if the settings could be loaded; otherwise \c False.
		///
		/// \sa SaveSettingsToFile
		[id(DISPID_STATBAR_LOADSETTINGSFROMFILE), helpstring("Loads the control's settings from the specified file.")]
		HRESULT LoadSettingsFromFile([in] BSTR file, [out, retval] VARIANT_BOOL* pSucceeded);
		/// \brief <em>Advises the control to redraw itself</em>
		[id(DISPID_STATBAR_REFRESH), helpstring("Advises the control to redraw itself.")]
		HRESULT Refresh(void);
		/// \brief <em>Saves the control's settings to the specified file</em>
		///
		/// \param[in] file The file to write to.
		///
		/// \return \c True if the settings could be saved; otherwise \c False.
		///
		/// \sa LoadSettingsFromFile
		[id(DISPID_STATBAR_SAVESETTINGSTOFILE), helpstring("Saves the control's settings to the specified file.")]
		HRESULT SaveSettingsToFile([in] BSTR file, [out, retval] VARIANT_BOOL* pSucceeded);
	};


	/// \interface _IStatusBarEvents
	/// \brief <em>The \c StatusBar class' events interface</em>
	///
	/// This interface defines all events the \c StatusBar class may raise.
	///
	/// \sa IStatusBar
	[
		uuid(994542FD-F293-4c9a-99C9-7557D303ECE0),
		helpstring("IStatusBar-event-interface")
	]
	dispinterface _IStatusBarEvents
	{
		properties:
		methods:
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using the left mouse button.
			///
			/// \param[in] panel The panel that was clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always be
			///            \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the values
			///            defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This is the control's default event.\n
			///          This event may be disabled.
			///
			/// \sa DblClick, MClick, RClick, XClick, HitTestConstants, IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_CLICK), helpstring("Will be fired if the user clicks into the control's client area using the left mouse button. This event may be disabled.")]
			void Click(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The context menu should be displayed</em>
			///
			/// Will be fired if the control's context menu should be displayed.
			///
			/// \param[in] panel The panel the context menu refers to. Will be \c Nothing if the context
			///            menu should be displayed for the whole control instead of only for a single item.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the menu's proposed position relative to the
			///            control's upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the menu's proposed position relative to the
			///            control's upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the menu's proposed position
			///            lies in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \sa RClick, HitTestConstants
			[id(DISPID_STATBARE_CONTEXTMENU), helpstring("Will be fired if the control's context menu should be displayed.")]
			void ContextMenu(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using the left mouse
			/// button.
			///
			/// \param[in] panel The panel that was double-clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should always
			///            be \c vbLeftButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was double-clicked. Any of the
			///            values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa Click, MDblClick, RDblClick, XDblClick, HitTestConstants, IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_DBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using the left mouse button. This event may be disabled.")]
			void DblClick(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The control window was destroyed</em>
			///
			/// Will be fired after the control window was destroyed.
			///
			/// \param[in] hWnd The control's window handle.
			///
			/// \sa RecreatedControlWindow, IStatusBar::hWnd
			[id(DISPID_STATBARE_DESTROYEDCONTROLWINDOW), helpstring("Will be fired after the control window was destroyed.")]
			void DestroyedControlWindow(LONG hWnd);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using the middle mouse button.
			///
			/// \param[in] panel The panel that was clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always be
			///            \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the values
			///            defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MDblClick, Click, RClick, XClick, HitTestConstants, IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_MCLICK), helpstring("Will be fired if the user clicks into the control's client area using the middle mouse button. This event may be disabled.")]
			void MClick(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using the middle mouse
			/// button.
			///
			/// \param[in] panel The panel that was double-clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbMiddleButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the
			///            double-click. Any combination of the values defined by VB's \c ShiftConstants
			///            enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was double-clicked. Any of the
			///            values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MClick, DblClick, RDblClick, XDblClick, HitTestConstants, IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_MDBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using the middle mouse button. This event may be disabled.")]
			void MDblClick(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>A mouse button was pressed over the control's client area</em>
			///
			/// Will be fired if the user presses a mouse button while the mouse cursor is located over the
			/// control's client area.
			///
			/// \param[in] panel The panel that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseUp, Click, MClick, RClick, XClick, HitTestConstants, ExtendedMouseButtonConstants,
			///      IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_MOUSEDOWN), helpstring("Will be fired if the user presses a mouse button while the mouse cursor is located over the control's client area. This event may be disabled.")]
			void MouseDown(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved into the control's client area</em>
			///
			/// Will be fired if the user moved the mouse cursor into the control's client area.
			///
			/// \param[in] panel The panel that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseLeave, PanelMouseEnter, MouseHover, MouseMove, HitTestConstants,
			///     ExtendedMouseButtonConstants, IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_MOUSEENTER), helpstring("Will be fired if the user moved the mouse cursor into the control's client area. This event may be disabled.")]
			void MouseEnter(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved into the control's client area a specified period of time before</em>
			///
			/// Will be fired if the mouse cursor has been located over the control's client area for the number
			/// of milliseconds specified by the \c IStatusBar::HoverTime property.
			///
			/// \param[in] panel The panel that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseEnter, MouseLeave, MouseMove, IStatusBar::HoverTime, HitTestConstants,
			///     ExtendedMouseButtonConstants, IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_MOUSEHOVER), helpstring("Will be fired if the mouse cursor has been located over the control's client area for the number of milliseconds specified by the 'HoverTime' property. This event may be disabled.")]
			void MouseHover(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved out of the control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor out of the control's client area.
			///
			/// \param[in] panel The panel that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseEnter, PanelMouseLeave, MouseHover, MouseMove, HitTestConstants,
			///     ExtendedMouseButtonConstants, IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_MOUSELEAVE), helpstring("Will be fired if the user moves the mouse cursor out of the control's client area. This event may be disabled.")]
			void MouseLeave(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved over the control's client area</em>
			///
			/// Will be fired if the user moves the mouse cursor over the control's client area.
			///
			/// \param[in] panel The panel that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseEnter, MouseLeave, MouseDown, MouseUp, HitTestConstants, ExtendedMouseButtonConstants,
			///     IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_MOUSEMOVE), helpstring("Will be fired if the user moves the mouse cursor over the control's client area. This event may be disabled.")]
			void MouseMove(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>A mouse button was released over the control's client area</em>
			///
			/// Will be fired if the user releases a mouse button while the mouse cursor is located over the
			/// control's client area.
			///
			/// \param[in] panel The panel that the mouse cursor is located over. May be \c Nothing.
			/// \param[in] button The released mouse button. Any of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa MouseDown, Click, MClick, RClick, XClick, HitTestConstants, ExtendedMouseButtonConstants,
			///     IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_MOUSEUP), helpstring("Will be fired if the user releases a mouse button while the mouse cursor is located over the control's client area. This event may be disabled.")]
			void MouseUp(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The data was dropped onto the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user completes the operation while the mouse cursor
			/// is located over the control's client area.
			///
			/// \param[in] data The dropped data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On return,
			///                this paramter must be set to the drop effect that the target finally executed.
			/// \param[in] dropTarget The panel that is the nearest one from the mouse cursor's position.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks Don't forget to release any references that you hold to the data object.
			///
			/// \sa OLEDragEnter, OLEDragMouseMove, OLEDragLeave, MouseUp, IStatusBar::RegisterForOLEDragDrop,
			///     IStatusBar::FinishOLEDragDrop, OLEDropEffectConstants, HitTestConstants
			[id(DISPID_STATBARE_OLEDRAGDROP), helpstring("Will be fired during OLE drag'n'drop if the user completes the operation while the mouse cursor is located over the control's client area.")]
			void OLEDragDrop(IOLEDataObject* data, OLEDropEffectConstants* effect, IStatusBarPanel* dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The data was dragged into the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moved the mouse cursor into the control's
			/// client area.
			///
			/// \param[in] data The dragged data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On return,
			///                this paramter must be set to the drop effect that the target wants to be used on
			///                drop.
			/// \param[in] dropTarget The panel that is the current target of the drag'n'drop operation.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \sa OLEDragMouseMove, OLEDragLeave, OLEDragDrop, MouseEnter, IStatusBar::RegisterForOLEDragDrop,
			///     OLEDropEffectConstants, HitTestConstants
			[id(DISPID_STATBARE_OLEDRAGENTER), helpstring("Will be fired during OLE drag'n'drop if the user moved the mouse cursor into the control's client area.")]
			void OLEDragEnter(IOLEDataObject* data, OLEDropEffectConstants* effect, IStatusBarPanel* dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The data was dragged out of the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moves the mouse cursor out of the control's
			/// client area or if the user canceled the drag'n'drop operation.
			///
			/// \param[in] data The dragged data.
			/// \param[in] dropTarget The panel that is the current target of the drag'n'drop operation.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks Don't forget to release any references that you hold to the data object.
			///
			/// \sa OLEDragEnter, OLEDragMouseMove, OLEDragDrop, MouseLeave, IStatusBar::RegisterForOLEDragDrop,
			///     HitTestConstants
			[id(DISPID_STATBARE_OLEDRAGLEAVE), helpstring("Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the control's client area or if the user canceled the drag'n'drop operation.")]
			void OLEDragLeave(IOLEDataObject* data, IStatusBarPanel* dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The data was dragged over the control during OLE drag'n'drop</em>
			///
			/// Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the control's
			/// client area.
			///
			/// \param[in] data The dragged data.
			/// \param[in,out] effect On entry, a bit field of the drop effects (defined by the
			///                \c OLEDropEffectConstants enumeration) supported by the drag source. On return,
			///                this paramter must be set to the drop effect that the target wants to be used on
			///                drop.
			/// \param[in] dropTarget The panel that is the current target of the drag'n'drop operation.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Any of the values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \sa OLEDragEnter, OLEDragLeave, OLEDragDrop, MouseMove, IStatusBar::RegisterForOLEDragDrop,
			///     OLEDropEffectConstants, HitTestConstants
			[id(DISPID_STATBARE_OLEDRAGMOUSEMOVE), helpstring("Will be fired during OLE drag'n'drop if the user moves the mouse cursor over the control's client area.")]
			void OLEDragMouseMove(IOLEDataObject* data, OLEDropEffectConstants* effect, IStatusBarPanel* dropTarget, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>An ownerdrawn panel must be drawn</em>
			///
			/// Will be fired if the specified panel's \c Content property is set to \c pcOwnerDrawn and the
			/// panel needs to be drawn.
			///
			/// \param[in] panel The panel to draw.
			/// \param[in] hDC The handle of the device context in which all drawing should take place.
			/// \param[in] drawingRectangle The bounding rectangle of the area that must be drawn.
			///
			/// \sa IStatusBarPanel::Content, RECTANGLE
			[id(DISPID_STATBARE_OWNERDRAWPANEL), helpstring("Will be fired if the specified panel's 'Content' property is set to 'pcOwnerDrawn' and the panel needs to be drawn.")]
			void OwnerDrawPanel(IStatusBarPanel* panel, LONG hDC, RECTANGLE* drawingRectangle);
			/// \brief <em>The mouse cursor was moved into a panel's bounding rectangle</em>
			///
			/// Will be fired if the user moved the mouse cursor into the specified panel's bounding rectangle.
			///
			/// \param[in] panel The panel that was entered.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Most of the values defined by the \c HitTestConstants enumeration are valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa PanelMouseLeave, MouseMove, HitTestConstants, ExtendedMouseButtonConstants,
			///     IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_PANELMOUSEENTER), helpstring("Will be fired if the user moved the mouse cursor into the specified panel's bounding rectangle. This event may be disabled.")]
			void PanelMouseEnter(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The mouse cursor was moved out of a panel's bounding rectangle</em>
			///
			/// Will be fired if the user moved the mouse cursor out of the specified panel's bounding rectangle.
			///
			/// \param[in] panel The panel that was left.
			/// \param[in] button The pressed mouse buttons. Any combination of the values defined by VB's
			///            \c MouseButtonConstants enumeration or the \c ExtendedMouseButtonConstants enumeration
			///            is valid.
			/// \param[in] shift The pressed modifier keys (Shift, Ctrl, Alt). Any combination of the values
			///            defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the mouse cursor's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that the mouse cursor's position lies
			///            in. Most of the values defined by the \c HitTestConstants enumeration are valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa PanelMouseEnter, MouseMove, HitTestConstants, ExtendedMouseButtonConstants,
			///     IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_PANELMOUSELEAVE), helpstring("Will be fired if the user moved the mouse cursor out of the specified panel's bounding rectangle. This event may be disabled.")]
			void PanelMouseLeave(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using the right mouse button.
			///
			/// \param[in] panel The panel that was clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the values
			///            defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa ContextMenu, RDblClick, Click, MClick, XClick, HitTestConstants, IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_RCLICK), helpstring("Will be fired if the user clicks into the control's client area using the right mouse button. This event may be disabled.")]
			void RClick(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using the right mouse
			/// button.
			///
			/// \param[in] panel The panel that was double-clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            always be \c vbRightButton (defined by VB's \c MouseButtonConstants enumeration).
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the double-click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was double-clicked. Any of the
			///            values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa RClick, DblClick, MDblClick, XDblClick, HitTestConstants, IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_RDBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using the right mouse button. This event may be disabled.")]
			void RDblClick(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The control window was recreated</em>
			///
			/// Will be fired after the control window was destroyed and recreated.\n
			/// Some properties can't be changed after the control window was created. If such a property is
			/// changed and the control window already exists, it is destroyed and recreated.
			///
			/// \param[in] hWnd The control's window handle.
			///
			/// \sa DestroyedControlWindow, IStatusBar::hWnd
			[id(DISPID_STATBARE_RECREATEDCONTROLWINDOW), helpstring("Will be fired after the control window was destroyed and recreated.")]
			void RecreatedControlWindow(LONG hWnd);
			/// \brief <em>The control window was resized</em>
			///
			/// Will be fired after the control window was resized.
			[id(DISPID_STATBARE_RESIZEDCONTROLWINDOW), helpstring("Will be fired after the control window was resized.")]
			void ResizedControlWindow(void);
			/// \brief <em>The control was recreated</em>
			///
			/// Will be fired before a panel's tooltip is displayed. Use this event to customize the tooltip
			/// window.
			///
			/// \param[in] panel The panel for which the tooltip will be displayed.
			/// \param[in] hWndToolTip The tooltip control's window handle.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa IStatusBar::ShowToolTips, IStatusBarPanel::ToolTipText, IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_SETUPTOOLTIPWINDOW), helpstring("Will be fired before a panel's tooltip is displayed. This event may be disabled.")]
			void SetupToolTipWindow(IStatusBarPanel* panel, LONG hWndToolTip);
			/// \brief <em>The \c SimpleMode property was toggled</em>
			///
			/// Will be fired after the \c SimpleMode property was toggled.
			///
			/// \sa IStatusBar::SimpleMode
			[id(DISPID_STATBARE_TOGGLEDSIMPLEMODE), helpstring("Will be fired after the 'SimpleMode' property was toggled.")]
			void ToggledSimpleMode(void);
			/// \brief <em>The user clicked into the control's client area</em>
			///
			/// Will be fired if the user clicks into the control's client area using one of the extended mouse
			/// buttons.
			///
			/// \param[in] panel The panel that was clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the click. This should always
			///            be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was clicked. Any of the values
			///            defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa XDblClick, Click, MClick, RClick, HitTestConstants, ExtendedMouseButtonConstants,
			///     IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_XCLICK), helpstring("Will be fired if the user clicks into the control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void XClick(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
			/// \brief <em>The user double-clicked into the control's client area</em>
			///
			/// Will be fired if the user double-clicks into the control's client area using one of the extended
			/// mouse buttons.
			///
			/// \param[in] panel The panel that was double-clicked. May be \c Nothing.
			/// \param[in] button The mouse buttons that were pressed during the double-click. This should
			///            be a constant defined by the \c ExtendedMouseButtonConstants enumeration.
			/// \param[in] shift The modifier keys (Shift, Ctrl, Alt) that were pressed during the double-click.
			///            Any combination of the values defined by VB's \c ShiftConstants enumeration is valid.
			/// \param[in] x The x-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] y The y-coordinate (in twips) of the double-click's position relative to the control's
			///            upper-left corner.
			/// \param[in] hitTestDetails Specifies the part of the control that was double-clicked. Any of the
			///            values defined by the \c HitTestConstants enumeration is valid.
			///
			/// \remarks This event may be disabled.
			///
			/// \sa XClick, DblClick, MDblClick, RDblClick, HitTestConstants, ExtendedMouseButtonConstants,
			///     IStatusBar::DisabledEvents
			[id(DISPID_STATBARE_XDBLCLICK), helpstring("Will be fired if the user double-clicks into the control's client area using one of the extended mouse buttons. This event may be disabled.")]
			void XDblClick(IStatusBarPanel* panel, SHORT button, SHORT shift, OLE_XPOS_PIXELS x, OLE_YPOS_PIXELS y, HitTestConstants hitTestDetails);
	};


	/// \brief <em>The \c StatusBar class</em>
	///
	/// The control's main COM class. It implements the \c IStatusBar and
	/// \c _IStatusBarEvents interfaces.
	///
	/// \sa IStatusBar, _IStatusBarEvents
	[
		uuid(00C4A3B3-F304-4eba-913E-2EAA6BDD54AE),
		version(1.5),
		helpstring("StatusBar Control 1.5 (Unicode)")
	]
	coclass StatusBar
	{
		[default] interface IStatusBar;
		[default, source] dispinterface _IStatusBarEvents;
	};


	/// \interface _IStatusBarPanelEvents
	/// \brief <em>The \c StatusBarPanel class' events interface</em>
	///
	/// This interface defines all events the \c StatusBarPanel class may raise.
	///
	/// \sa IStatusBarPanel
	[
		uuid(D8643419-36ED-4d29-A7F2-FA622E94BFE3),
		helpstring("IStatusBarPanel-event-interface")
	]
	dispinterface _IStatusBarPanelEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c StatusBarPanel class</em>
	///
	/// This COM class implements the \c IStatusBarPanel and \c _IStatusBarPanelEvents interfaces.
	///
	/// \sa IStatusBarPanel, _IStatusBarPanelEvents, StatusBar, StatusBarPanels
	[
		uuid(CB0F173F-9E1F-4365-BF3C-6CC52F8C268B),
		version(1.5),
		noncreatable,
		helpstring("StatusBarPanel Class 1.5 (Unicode)")
	]
	coclass StatusBarPanel
	{
		[default] interface IStatusBarPanel;
		[default, source] dispinterface _IStatusBarPanelEvents;
	};


	/// \interface _IStatusBarPanelsEvents
	/// \brief <em>The \c StatusBarPanels class' events interface</em>
	///
	/// This interface defines all events the \c StatusBarPanels class may raise.
	///
	/// \sa IStatusBarPanels
	[
		uuid(D577E058-A861-4166-8A40-AA7E3667FB93),
		helpstring("IStatusBarPanels-event-interface")
	]
	dispinterface _IStatusBarPanelsEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c StatusBarPanels class</em>
	///
	/// This COM class implements the \c IStatusBarPanels and \c _IStatusBarPanelsEvents interfaces.
	///
	/// \sa IStatusBarPanels, _IStatusBarPanelsEvents, StatusBar, StatusBarPanel
	[
		uuid(CCA75315-B100-4b5f-80F6-8DFE616F8FDB),
		version(1.5),
		noncreatable,
		helpstring("StatusBarPanels Class 1.5 (Unicode)")
	]
	coclass StatusBarPanels
	{
		[default] interface IStatusBarPanels;
		[default, source] dispinterface _IStatusBarPanelsEvents;
	};


	/// \interface _IOLEDataObjectEvents
	/// \brief <em>The \c OLEDataObject class' events interface</em>
	///
	/// This interface defines all events the \c OLEDataObject class may raise.
	///
	/// \sa IOLEDataObject
	[
		uuid(D036DA2E-7096-4cd5-AAB7-AFA9C0741AF6),
		helpstring("IOLEDataObject-event-interface")
	]
	dispinterface _IOLEDataObjectEvents
	{
		properties:
		methods:
	};


	/// \brief <em>The \c OLEDataObject class</em>
	///
	/// This COM class implements the \c IOLEDataObject and \c _IOLEDataObjectEvents interfaces.
	///
	/// \sa IOLEDataObject, _IOLEDataObjectEvents
	[
		uuid(79965827-4420-47d0-A082-4C51278AEF0D),
		version(1.5),
		noncreatable,
		helpstring("OLEDataObject Class 1.5 (Unicode)")
	]
	coclass OLEDataObject
	{
		[default] interface IOLEDataObject;
		[default, source] dispinterface _IOLEDataObjectEvents;
	};


	[
		uuid(D624F96D-6A66-4901-AE67-539024DEAA5C),
		version(1.5),
		noncreatable,
		helpstring("CommonProperties Class 1.5 (Unicode)"),
		hidden
	]
	coclass CommonProperties
	{
		[default] interface IUnknown;
	};


	[
		uuid(5E52FEEA-9653-44c7-BD00-EA7B18D7A7E5),
		version(1.5),
		noncreatable,
		helpstring("PanelProperties Class 1.5 (Unicode)"),
		hidden
	]
	coclass PanelProperties
	{
		[default] interface IUnknown;
	};


	[
		uuid(A5BA4D0A-A454-4acd-987F-F8A9CF93F69B),
		version(1.5),
		noncreatable,
		helpstring("StringProperties Class 1.5 (Unicode)"),
		hidden
	]
	coclass StringProperties
	{
		[default] interface IUnknown;
	};
};
